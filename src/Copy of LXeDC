//-------- GEANT4
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4AssemblyVolume.hh"
#include "G4Transform3D.hh"
#include "G4MultiFunctionalDetector.hh"
#include "G4VPrimitiveScorer.hh"
#include "G4SDParticleFilter.hh"
#include "G4PSEnergyDeposit.hh"
#include "G4OpticalSurface.hh"
#include "G4LogicalSkinSurface.hh"
#include "G4LogicalBorderSurface.hh"
//#include <G4Sphere.hh>
//#include <G4Orb.hh>
//#include <G4Polyhedra.hh>
//#include <G4Polycone.hh>
//#include <G4Ellipsoid.hh>
//#include <G4Trd.hh>
//#include <G4Cons.hh>
//#include <G4UnionSolid.hh>
//#include <G4IntersectionSolid.hh>
//#include <G4SubtractionSolid.hh>
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
//#include "G4PVParameterised.hh>
#include "G4OpBoundaryProcess.hh"
#include "G4SDManager.hh"
#include "G4ThreeVector.hh"
#include "G4RotationMatrix.hh"
#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "globals.hh"

//#include <vector>
//#include <numeric>
//#include <sstream>
//#include <algorithm>
//#include <cmath>
//#include <cassert>

//using std::vector;
//using std::stringstream;
//using std::max;

//-------- User
#include "LXeDC.hh"

LXeDC::LXeDC()
 :	experimentalHall_log(0),su_log(0),ca_log(0),wi_log(0),
    experimentalHall_phys(0),su_phys(0),wi_phys(0)
{;}

LXeDC::~LXeDC()
{;}

G4VPhysicalVolume* LXeDC::Construct()
{
  DefineMaterials();
  ConstructLaboratory();
  SensitiveDete();
  return experimentalHall_phys;
}

void
LXeDC::DefineMaterials()
{
  G4NistManager* pNistManager = G4NistManager::Instance();
  //================================== elements ===================================
  G4Element *Xe = new G4Element("Xenon",     "Xe", 54., 131.293*g/mole);
  //G4Element *H  = new G4Element("Hydrogen",  "H",  1.,  1.0079*g/mole);
  G4Element *C  = new G4Element("Carbon",    "C",  6.,  12.011*g/mole);
  G4Element *N  = new G4Element("Nitrogen",  "N",  7.,  14.007*g/mole);
  G4Element *O  = new G4Element("Oxygen",    "O",  8.,  15.999*g/mole);
  G4Element *F  = new G4Element("Fluorine",  "F",  9.,  18.998*g/mole);
  //G4Element *Al = new G4Element("Aluminium", "Al", 13., 26.982*g/mole);
  G4Element *Si = new G4Element("Silicon",   "Si", 14., 28.086*g/mole);
  //G4Element *Cr = new G4Element("Chromium",  "Cr", 24., 51.996*g/mole);
  //G4Element *Mn = new G4Element("Manganese", "Mn", 25., 54.938*g/mole);
  //G4Element *Fe = new G4Element("Iron",      "Fe", 26., 55.85*g/mole);
  //G4Element *Ni = new G4Element("Nickel",    "Ni", 28., 58.693*g/mole);
  //G4Element *Cu = new G4Element("Copper",    "Cu", 29., 63.546*g/mole);
  //G4Element *Pb = new G4Element("Lead",      "Pb", 82., 207.2*g/mole);
  //G4Element *B  = pNistManager->FindOrBuildElement("B");
  //G4Element *Gd = pNistManager->FindOrBuildElement("Gd");
   //================================== materials ================================== 
  //------------------------------------- air -------------------------------------
  pNistManager->FindOrBuildMaterial("G4_AIR");
  //----------------------------------- vacuum ------------------------------------
  G4Material *Vacuum = new G4Material("Vacuum", 1.e-20*g/cm3, 2, kStateGas);
  Vacuum->AddElement(N, 0.755);
  Vacuum->AddElement(O, 0.245);
  //-------------------------------- liquid xenon ---------------------------------
  G4Material *LXe = new G4Material("LXe", 2.85*g/cm3, 1, kStateLiquid, 168.15*kelvin, 1.5*atmosphere);
  LXe->AddElement(Xe, 1);
  const G4int iNbEntries = 3;
  G4double pdLXePhotonMomentum[iNbEntries]   = {6.91*eV, 6.98*eV, 7.05*eV};
  G4double pdLXeScintillation[iNbEntries]    = {0.1,     1.0,     0.1};
  G4double pdLXeRefractiveIndex[iNbEntries]  = {1.63,    1.61,    1.58};
  G4double pdLXeAbsorbtionLength[iNbEntries] = {100.*cm, 100.*cm, 100.*cm};
  G4double pdLXeScatteringLength[iNbEntries] = {30.*cm,  30.*cm,  30.*cm};
  G4MaterialPropertiesTable *pLXePropertiesTable = new G4MaterialPropertiesTable();
  pLXePropertiesTable->AddProperty("FASTCOMPONENT", pdLXePhotonMomentum, pdLXeScintillation, iNbEntries);
  pLXePropertiesTable->AddProperty("SLOWCOMPONENT", pdLXePhotonMomentum, pdLXeScintillation, iNbEntries);
  pLXePropertiesTable->AddProperty("RINDEX", pdLXePhotonMomentum, pdLXeRefractiveIndex, iNbEntries);
  pLXePropertiesTable->AddProperty("ABSLENGTH", pdLXePhotonMomentum, pdLXeAbsorbtionLength, iNbEntries);
  pLXePropertiesTable->AddProperty("RAYLEIGH", pdLXePhotonMomentum, pdLXeScatteringLength, iNbEntries);
  pLXePropertiesTable->AddConstProperty("SCINTILLATIONYIELD", 20./keV);
  pLXePropertiesTable->AddConstProperty("RESOLUTIONSCALE", 1.0);
  pLXePropertiesTable->AddConstProperty("FASTTIMECONSTANT", 3.*ns);
  pLXePropertiesTable->AddConstProperty("SLOWTIMECONSTANT", 27.*ns);
  pLXePropertiesTable->AddConstProperty("YIELDRATIO", 1.0);
  LXe->SetMaterialPropertiesTable(pLXePropertiesTable);
  
  //-------------------------------- gaseous xenon --------------------------------
  G4Material *GXe = new G4Material("GXe", 0.005887*g/cm3, 1, kStateGas, 173.15*kelvin, 1.5*atmosphere);
  GXe->AddElement(Xe, 1);
  G4double pdGXePhotonMomentum[iNbEntries]   = {6.91*eV, 6.98*eV, 7.05*eV};
  G4double pdGXeScintillation[iNbEntries]    = {0.1,     1.0,     0.1};
  G4double pdGXeRefractiveIndex[iNbEntries]  = {1.00,    1.00,    1.00};
  G4double pdGXeAbsorbtionLength[iNbEntries] = {100*m,   100*m,   100*m};
  G4double pdGXeScatteringLength[iNbEntries] = {100*m,   100*m,   100*m};
 
  G4MaterialPropertiesTable *pGXePropertiesTable = new G4MaterialPropertiesTable(); 
 
  pGXePropertiesTable->AddProperty("FASTCOMPONENT", pdGXePhotonMomentum, pdGXeScintillation, iNbEntries);
  pGXePropertiesTable->AddProperty("SLOWCOMPONENT", pdGXePhotonMomentum, pdGXeScintillation, iNbEntries);
  pGXePropertiesTable->AddProperty("RINDEX", pdGXePhotonMomentum, pdGXeRefractiveIndex, iNbEntries);
  pGXePropertiesTable->AddProperty("ABSLENGTH", pdGXePhotonMomentum, pdGXeAbsorbtionLength, iNbEntries);
  pGXePropertiesTable->AddProperty("RAYLEIGH", pdGXePhotonMomentum, pdGXeScatteringLength, iNbEntries);

  pGXePropertiesTable->AddConstProperty("SCINTILLATIONYIELD", 0./(keV));
  pGXePropertiesTable->AddConstProperty("RESOLUTIONSCALE", 0);
  pGXePropertiesTable->AddConstProperty("FASTTIMECONSTANT", 3.*ns);
  pGXePropertiesTable->AddConstProperty("SLOWTIMECONSTANT", 27.*ns);
  pGXePropertiesTable->AddConstProperty("YIELDRATIO", 1.0);

  GXe->SetMaterialPropertiesTable(pGXePropertiesTable); 

  //----------------------------------- Quartz ------------------------------------
  // ref: http://www.sciner.com/Opticsland/FS.htm
  G4Material *Quartz = new G4Material("Quartz", 2.201*g/cm3, 2, kStateSolid, 168.15*kelvin, 1.5*atmosphere);
  Quartz->AddElement(Si, 1);
  Quartz->AddElement(O, 2);

  const  G4int iNbEntriesMatch = 3;
  G4double pdQuartzPhotonMomentum[iNbEntriesMatch]   = {6.91*eV, 6.98*eV, 7.05*eV}; 
  G4double pdQuartzRefractiveIndex[iNbEntriesMatch]  = {1.50,    1.56,    1.60};
  G4double pdQuartzAbsorbtionLength[iNbEntriesMatch] = {30*m,    30*m,    30*m};
  G4double pdQuartzReflectivity[iNbEntriesMatch]    = {0.95,    0.95,    0.95};  

  G4MaterialPropertiesTable *pQuartzPropertiesTable = new G4MaterialPropertiesTable(); 

  pQuartzPropertiesTable->AddProperty("RINDEX", pdQuartzPhotonMomentum, pdQuartzRefractiveIndex, iNbEntriesMatch);
  pQuartzPropertiesTable->AddProperty("ABSLENGTH", pdQuartzPhotonMomentum, pdQuartzAbsorbtionLength, iNbEntriesMatch);
  pQuartzPropertiesTable->AddProperty("REFLECTIVITY", pdQuartzPhotonMomentum, pdQuartzReflectivity, iNbEntriesMatch);
  
  Quartz->SetMaterialPropertiesTable(pQuartzPropertiesTable);

  //------------------------------------ teflon -----------------------------------
  G4Material* Teflon = new G4Material("Teflon AF", 2.2*g/cm3, 2, kStateSolid);
  Teflon->AddElement(C, 0.240183);
  Teflon->AddElement(F, 0.759817);

  G4double pdTeflonPhotonMomentum[iNbEntries]  = {6.91*eV, 6.98*eV, 7.05*eV};
  G4double pdTeflonRefractiveIndex[iNbEntries] = {1.34,    1.34,    1.34};
  G4double pdTeflonReflectivity[iNbEntries]    = {0.95,    0.95,    0.95};
  G4double pdTeflonAbsLength[iNbEntries]       = {50*m,    50*m,    50*m};
  G4double pdTeflonScatteringLength[iNbEntries] = {30*cm,   30*cm,   30*cm};
//  
//  G4double pdTeflonSpecularLobe[iNbEntries]    = {0.01,    0.01,    0.01};
//  G4double pdTeflonSpecularSpike[iNbEntries]   = {0.01,    0.01,    0.01};
//  G4double pdTeflonBackscatter[iNbEntries]     = {0.01,    0.01,    0.01};
//  G4double pdTeflonEfficiency[iNbEntries]      = {1.0,     1.0,     1.0};
  G4MaterialPropertiesTable *pTeflonPropertiesTable = new G4MaterialPropertiesTable();

  pTeflonPropertiesTable->AddProperty("RINDEX", pdTeflonPhotonMomentum, pdTeflonRefractiveIndex, iNbEntries);
  pTeflonPropertiesTable->AddProperty("ABSLENGTH", pdTeflonPhotonMomentum, pdTeflonAbsLength, iNbEntries);  
  pTeflonPropertiesTable->AddProperty("RAYLEIGH", pdTeflonPhotonMomentum, pdTeflonScatteringLength, iNbEntries);
  pTeflonPropertiesTable->AddProperty("REFLECTIVITY", pdTeflonPhotonMomentum, pdTeflonReflectivity, iNbEntries);
//  pTeflonPropertiesTable->AddProperty("SPECULARLOBECONSTANT", pdTeflonPhotonMomentum, pdTeflonSpecularLobe, iNbEntries);
//  pTeflonPropertiesTable->AddProperty("SPECULARSPIKECONSTANT", pdTeflonPhotonMomentum, pdTeflonSpecularSpike, iNbEntries);
//  pTeflonPropertiesTable->AddProperty("BACKSCATTERCONSTANT", pdTeflonPhotonMomentum, pdTeflonBackscatter, iNbEntries);
//  pTeflonPropertiesTable->AddProperty("EFFICIENCY", pdTeflonPhotonMomentum, pdTeflonEfficiency, iNbEntries);
  Teflon->SetMaterialPropertiesTable(pTeflonPropertiesTable);
}

void LXeDC::ConstructLaboratory()
{
  // Experimental hall (world volume) --------------
  G4double expHall_x = 6.0*cm;
  G4double expHall_y = 6.0*cm;
  G4double expHall_z = 6.0*cm;
  G4Material *Air = G4Material::GetMaterial("G4_AIR");
  G4Box* experimentalHall_box = new G4Box("expHall_box",expHall_x,expHall_y,expHall_z);
  experimentalHall_log = new G4LogicalVolume(experimentalHall_box,Air,"expHall_log",0,0,0);
  experimentalHall_phys = new G4PVPlacement(0,G4ThreeVector(),experimentalHall_log,"expHall",0,false,0);
  //experimentalHall_log->SetVisAttributes(G4VisAttributes::Invisible);
  // Support capillary -----------------------------
  G4double su_x = 1.5*cm;
  G4double su_y = 5*cm;
  G4double su_z = 5*cm;
  G4Material *Teflon = G4Material::GetMaterial("Teflon AF");
  G4Box* su_box = new G4Box("expHall_box",su_x,su_y,su_z);
  su_log = new G4LogicalVolume(su_box,Teflon,"Su_log",0,0,0);
  su_phys = new G4PVPlacement(0,G4ThreeVector(),su_log,"Support Teflon",experimentalHall_log,false,0);
  // Capillary ---------------------------------------
  G4double  pRMin = 0.0*mm;
  G4double  pRMax = 0.5*mm;
  G4double  pDz = 1.5*cm;
  G4double  pSPhi = 0*rad;
  G4double  pDPhi = twopi*rad;
  G4Material *LXe = G4Material::GetMaterial("LXe");
  G4Tubs* ca_tubs = new G4Tubs("LXe capillary",pRMin,pRMax,pDz,pSPhi,pDPhi);
  ca_log = new G4LogicalVolume(ca_tubs,LXe,"Ca_log",0,0,0);
  G4AssemblyVolume* assemblyDetector = new G4AssemblyVolume();
  // Rotation and translation of a plate inside the assembly
  G4RotationMatrix Ra;
  Ra.rotateY(90*deg);
  G4ThreeVector Ta;
  // Rotation of the assembly inside the world
  G4RotationMatrix Rm;
  G4ThreeVector Tm;
// ------------------------------------------------------------------------------
// --------- small number of capillary for testing
//  G4int f_y = 1;
//  G4int f_z = 1;
//  for(G4double i_y=0;i_y<f_y;i_y++)
//  {
//  	for(G4double i_z=0;i_z<f_z;i_z++)
//  	{
//      Ta.setX(0.0*mm); 
//      Ta.setY(i_y*1.2*mm-(((f_y-1)/2)*1.2)*mm); 
//      Ta.setZ(i_z*1.2*mm-(((f_z-1)/2)*1.2)*mm);
//      assemblyDetector->AddPlacedVolume(ca_log,Ta,&Ra);
//  	}
//  }
//  
// ---------- end of test
//// ------------------------------------------------------------------------------
  for(G4double i_y=0;i_y<83;i_y++)
  {
  	for(G4double i_z=0;i_z<83;i_z++)
  	{
      Ta.setX(0.0*mm); 
      Ta.setY(i_y*1.2*mm-49.2*mm); 
      Ta.setZ(i_z*1.2*mm-49.2*mm);
      assemblyDetector->AddPlacedVolume(ca_log,Ta,&Ra);
  	}
  }
  // Now instantiate the layers
  assemblyDetector->MakeImprint(su_log,Tm,&Rm);
  // Quartz Windows -----------------------------
  G4double wi_x = 0.5*cm;
  G4double wi_y = 5*cm;
  G4double wi_z = 5*cm;
  G4Box* wi_box = new G4Box("wi_box",wi_x,wi_y,wi_z);
  G4Material *Quartz = G4Material::GetMaterial("Quartz");
  wi_log = new G4LogicalVolume(wi_box,Quartz,"wi_log",0,0,0);
  wi_phys = new G4PVPlacement(0,G4ThreeVector(2.0*cm,0.0,0.0),wi_log,"Windows_Quartz",experimentalHall_log,false,0);
    
  // ------------------------------- Surfaces -----------------------------------------------
  // ------------------------- Optical Propertiers ------------------------------------------
  G4OpticalSurface* OpSupportSurface = new G4OpticalSurface("SupportSurface");
  OpSupportSurface->SetModel(glisur);
  OpSupportSurface->SetType(dielectric_metal);
  OpSupportSurface->SetFinish(polished);
  G4LogicalSkinSurface* SupportSurface = new G4LogicalSkinSurface("SupportSurfaceL",su_log,OpSupportSurface);

  G4OpticalSurface* OpCapySurface = new G4OpticalSurface("CapySurface");
  OpCapySurface->SetModel(glisur);
  OpCapySurface->SetType(dielectric_dielectric);
  OpCapySurface->SetFinish(polished);
  G4LogicalSkinSurface* CapySurface = new G4LogicalSkinSurface("CapySurfaceL",ca_log,OpCapySurface);
  
  G4OpticalSurface* OpWindSurface = new G4OpticalSurface("WindSurface");
  OpWindSurface->SetModel(glisur);
  OpWindSurface->SetType(dielectric_metal);
  OpWindSurface->SetFinish(polished);
  G4LogicalSkinSurface* WindSurface = new G4LogicalSkinSurface("WindSurfaceL",wi_log,OpWindSurface);

}

void LXeDC::SensitiveDete()
{
  // ------------------------------------------------------------------------------------------
  // sensitive detectors -----------------------------------------------------
  G4SDManager* SDman = G4SDManager::GetSDMpointer();
  SDman->SetVerboseLevel(1);
  //--------------------------------------------------------------------------------------------
  //Define Multi-Detector and Register 
  //--------------------------------------------------------------------------------------------
  G4MultiFunctionalDetector* det = new G4MultiFunctionalDetector("IonPro");
  SDman->AddNewDetector(det);
  ca_log->SetSensitiveDetector(det);
  //--------------------------------------------------------------------------------------------
  //Primitive Score
  //--------------------------------------------------------------------------------------------
  G4VPrimitiveScorer* primitive;
  primitive = new G4PSEnergyDeposit("nproton");
  //--------------------------------------------------------------------------------------------
  //Filter
  //--------------------------------------------------------------------------------------------
  G4String filterName,particleName;
  //-- neutron filter
  //G4SDParticleFilter* epFilter = new G4SDParticleFilter(filterName="epFilter");
  //epFilter->add(particleName="e-");
  //epFilter->add(particleName="neutron");
  //primitive->SetFilter(epFilter);
  //epFilter->show();
  //-- Register Sensitive Detector Run Action 
  det->RegisterPrimitive(primitive);
  //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
}
